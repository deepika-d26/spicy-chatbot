const firebaseConfig = {
  apiKey: "AIzaSyDYmGp9Mha7CzCC-kFIeIqGy1_lscZMZOs",
  authDomain: "spicy-food-order-assistant.firebaseapp.com",
  projectId: "spicy-food-order-assistant",
  storageBucket: "spicy-food-order-assistant.firebasestorage.app",
  messagingSenderId: "894408741484",
  appId: "1:894408741484:web:130641154b60f9376e7e49"
};

// Initialize Firebase
firebase.initializeApp(firebaseConfig);
const db = firebase.firestore(); // This is your database!
// Configuration - UPDATE THIS TO YOUR AZURE FUNCTION URL
const AZURE_FUNCTION_URL = 'https://spicychatbotfunction-bbfydebcfcf2b6er.centralindia-01.azurewebsites.net/api/HttpTrigger1deepi?';
const BOT_SECRET_KEY = "CBrDk2c3vJHhkemq5zqAL16mBeMxfnHtqt149b3xzDeER4pK00JaJQQJ99BGACGhslBAArohAAABAZBS1HIj.9wV5SZIZ9QRw28dGUrPmfF048FxRwKCwmQGaU4C28WHCMMdtAY9AJQQJ99BGAC77bzfAArohAAABAZBS1u0y";
const BOT_NAME = "SpicyFoodBot";

// Menu items with multilingual support
const menuItems = {
    pizza: {
        id: 'pizza',
        name: { en: 'Spicy Margherita Pizza', hi: '‡§Æ‡§∏‡§æ‡§≤‡•á‡§¶‡§æ‡§∞ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡•á‡§∞‡§ø‡§ü‡§æ ‡§™‡§ø‡§ú‡§º‡•ç‡§ú‡§º‡§æ', es: 'Pizza Margarita Picante', kn: '‡≤∏‡≥ç‡≤™‡≥à‡≤∏‡≤ø ‡≤Æ‡≤æ‡≤∞‡≥ç‡≤ó‡≤∞‡≤ø‡≤ü‡≤æ ‡≤™‡≤ø‡≤ú‡≥ç‡≤ú‡≤æ' },
        price: 399,
        description: {
            en: 'Classic pizza with mozzarella, tomato sauce, and spicy jalape√±os',
            hi: '‡§Æ‡•ã‡§ú‡§º‡•á‡§∞‡•á‡§≤‡§æ, ‡§ü‡§Æ‡§æ‡§ü‡§∞ ‡§∏‡•â‡§∏ ‡§î‡§∞ ‡§Æ‡§∏‡§æ‡§≤‡•á‡§¶‡§æ‡§∞ ‡§ú‡•à‡§≤‡•á‡§™‡•á‡§®‡•ã‡§∏ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ï‡•ç‡§≤‡§æ‡§∏‡§ø‡§ï ‡§™‡§ø‡§ú‡§º‡•ç‡§ú‡§º‡§æ',
            es: 'Pizza cl√°sica con mozzarella, salsa de tomate y jalape√±os picantes',
            kn: '‡≤Æ‡≥ä‡≤ú‡≤∞‡≥Ü‡≤≤‡≥ç‡≤≤‡≤æ, ‡≤ü‡≥ä‡≤Æ‡≥á‡≤ü‡≥ä ‡≤∏‡≤æ‡≤∏‡≥ç ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤Æ‡≤∏‡≤æ‡≤≤‡≥Ü ‡≤ú‡≤≤‡≤™‡≥Ü‡≤®‡≥ä‡≤ó‡≤≥‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü ‡≤ï‡≥ç‡≤≤‡≤æ‡≤∏‡≤ø‡≤ï‡≥ç ‡≤™‡≤ø‡≤ú‡≥ç‡≤ú‡≤æ'
        },
        image: 'https://images.unsplash.com/photo-1565299624946-b28f40a0ae38?ixlib=rb-1.2.1&auto=format&fit=crop&w=100&q=80',
        category: 'veg',
        spicy: 3
    },
    pasta: {
        id: 'pasta',
        name: { en: 'Spicy Arrabiata Pasta', hi: '‡§Æ‡§∏‡§æ‡§≤‡•á‡§¶‡§æ‡§∞ ‡§Ö‡§∞‡•ç‡§∞‡§æ‡§¨‡§ø‡§Ø‡§æ‡§ü‡§æ ‡§™‡§æ‡§∏‡•ç‡§§‡§æ', es: 'Pasta Arrabiata Picante', kn: '‡≤∏‡≥ç‡≤™‡≥à‡≤∏‡≤ø ‡≤Ö‡≤∞‡≥ç‡≤∞‡≤¨‡≤ø‡≤Ø‡≤æ‡≤ü‡≤æ ‡≤™‡≤æ‡≤∏‡≥ç‡≤ü‡≤æ' },
        price: 349,
        description: {
            en: 'Penne pasta in spicy tomato garlic sauce with chili flakes',
            hi: '‡§Æ‡§∏‡§æ‡§≤‡•á‡§¶‡§æ‡§∞ ‡§ü‡§Æ‡§æ‡§ü‡§∞ ‡§≤‡§π‡§∏‡•Å‡§® ‡§∏‡•â‡§∏ ‡§î‡§∞ ‡§≤‡§æ‡§≤ ‡§Æ‡§ø‡§∞‡•ç‡§ö ‡§ï‡•á ‡§∏‡§æ‡§• ‡§™‡•á‡§®‡•ç‡§®‡•á ‡§™‡§æ‡§∏‡•ç‡§§‡§æ',
            es: 'Pasta penne en salsa picante de tomate y ajo con hojuelas de chile',
            kn: '‡≤Æ‡≤∏‡≤æ‡≤≤‡≥Ü ‡≤ü‡≥ä‡≤Æ‡≥á‡≤ü‡≥ä ‡≤¨‡≥Ü‡≤≥‡≥ç‡≤≥‡≥Å‡≤≥‡≥ç‡≤≥‡≤ø ‡≤∏‡≤æ‡≤∏‡≥ç ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤Æ‡≥Ü‡≤£‡≤∏‡≤ø‡≤®‡≤ï‡≤æ‡≤Ø‡≤ø ‡≤§‡≥Å‡≤Ç‡≤°‡≥Å‡≤ó‡≤≥‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü ‡≤™‡≥Ü‡≤®‡≥ç‡≤®‡≥Ü ‡≤™‡≤æ‡≤∏‡≥ç‡≤ü‡≤æ'
        },
        image: 'https://images.unsplash.com/photo-1555949258-eb67b1ef0ceb?ixlib=rb-1.2.1&auto=format&fit=crop&w=100&q=80',
        category: 'veg',
        spicy: 4
    },
    burger: {
        id: 'burger',
        name: { en: 'Spicy Chicken Burger', hi: '‡§Æ‡§∏‡§æ‡§≤‡•á‡§¶‡§æ‡§∞ ‡§ö‡§ø‡§ï‡§® ‡§¨‡§∞‡•ç‡§ó‡§∞', es: 'Hamburguesa Picante de Pollo', kn: '‡≤∏‡≥ç‡≤™‡≥à‡≤∏‡≤ø ‡≤ö‡≤ø‡≤ï‡≤®‡≥ç ‡≤¨‡≤∞‡≥ç‡≤ó‡≤∞‡≥ç' },
        price: 279,
        description: {
            en: 'Juicy chicken patty with spicy mayo, lettuce, and jalape√±os',
            hi: '‡§Æ‡§∏‡§æ‡§≤‡•á‡§¶‡§æ‡§∞ ‡§Æ‡•á‡§Ø‡•ã, ‡§≤‡•á‡§ü‡•ç‡§Ø‡•Ç‡§∏ ‡§î‡§∞ ‡§ú‡•à‡§≤‡•á‡§™‡•á‡§®‡•ã‡§∏ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∞‡§∏‡§¶‡§æ‡§∞ ‡§ö‡§ø‡§ï‡§® ‡§™‡•à‡§ü‡•Ä',
            es: 'Jugosa hamburguesa de pollo con mayonesa picante, lechuga y jalape√±os',
            kn: '‡≤Æ‡≤∏‡≤æ‡≤≤‡≥Ü ‡≤Æ‡≥á‡≤Ø‡≥ä‡≤®‡≥Ä‡≤∏‡≥ç, ‡≤≤‡≥Ü‡≤ü‡≥ç‡≤Ø‡≥Ç‡≤∏‡≥ç ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤ú‡≤≤‡≤™‡≥Ü‡≤®‡≥ä‡≤ó‡≤≥‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü ‡≤∞‡≤∏‡≤≠‡≤∞‡≤ø‡≤§ ‡≤ö‡≤ø‡≤ï‡≤®‡≥ç ‡≤™‡≥ç‡≤Ø‡≤æ‡≤ü‡≤ø'
        },
        image: 'https://images.unsplash.com/photo-1568901346375-23c9450c58cd?ixlib=rb-1.2.1&auto=format&fit=crop&w=100&q=80',
        category: 'non-veg',
        spicy: 3
    },
    salad: {
        id: 'salad',
        name: { en: 'Spicy Thai Salad', hi: '‡§Æ‡§∏‡§æ‡§≤‡•á‡§¶‡§æ‡§∞ ‡§•‡§æ‡§à ‡§∏‡§≤‡§æ‡§¶', es: 'Ensalada Tailandesa Picante', kn: '‡≤∏‡≥ç‡≤™‡≥à‡≤∏‡≤ø ‡≤•‡≤æ‡≤Ø‡≥ç ‡≤∏‡≤≤‡≤æ‡≤°‡≥ç' },
        price: 299,
        description: {
            en: 'Fresh vegetables with spicy Thai dressing and peanuts',
            hi: '‡§Æ‡§∏‡§æ‡§≤‡•á‡§¶‡§æ‡§∞ ‡§•‡§æ‡§à ‡§°‡•ç‡§∞‡•á‡§∏‡§ø‡§Ç‡§ó ‡§î‡§∞ ‡§Æ‡•Ç‡§Ç‡§ó‡§´‡§≤‡•Ä ‡§ï‡•á ‡§∏‡§æ‡§• ‡§§‡§æ‡§ú‡§º‡•Ä ‡§∏‡§¨‡•ç‡§ú‡§ø‡§Ø‡§æ‡§Å',
            es: 'Verduras frescas con aderezo tailand√©s picante y man√≠',
            kn: '‡≤Æ‡≤∏‡≤æ‡≤≤‡≥Ü ‡≤•‡≤æ‡≤Ø‡≥ç ‡≤°‡≥ç‡≤∞‡≥Ü‡≤∏‡≤ø‡≤Ç‡≤ó‡≥ç ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤ï‡≤°‡≤≤‡≥Ü‡≤ï‡≤æ‡≤Ø‡≤ø‡≤ó‡≤≥‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü ‡≤§‡≤æ‡≤ú‡≤æ ‡≤§‡≤∞‡≤ï‡≤æ‡≤∞‡≤ø‡≤ó‡≤≥‡≥Å'
        },
        image: 'https://images.unsplash.com/photo-1546793665-c74683f339c1?ixlib=rb-1.2.1&auto=format&fit=crop&w=100&q=80',
        category: 'veg',
        spicy: 2
    },
    sandwich: {
        id: 'sandwich',
        name: { en: 'Spicy Veg Sandwich', hi: '‡§Æ‡§∏‡§æ‡§≤‡•á‡§¶‡§æ‡§∞ ‡§µ‡•á‡§ú ‡§∏‡•à‡§Ç‡§°‡§µ‡§ø‡§ö', es: 'S√°ndwich Vegetal Picante', kn: '‡≤∏‡≥ç‡≤™‡≥à‡≤∏‡≤ø ‡≤µ‡≥Ü‡≤ú‡≥ç ‡≤∏‡≥ç‡≤Ø‡≤æ‡≤Ç‡≤°‡≥ç‚Äå‡≤µ‡≤ø‡≤ö‡≥ç' },
        price: 199,
        description: {
            en: 'Grilled vegetables with spicy chipotle sauce and cheese',
            hi: '‡§Æ‡§∏‡§æ‡§≤‡•á‡§¶‡§æ‡§∞ ‡§ö‡§ø‡§™‡•ã‡§ü‡§≤ ‡§∏‡•â‡§∏ ‡§î‡§∞ ‡§ö‡•Ä‡§ú‡§º ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ó‡•ç‡§∞‡§ø‡§≤‡•ç‡§° ‡§∏‡§¨‡•ç‡§ú‡§ø‡§Ø‡§æ‡§Å',
            es: 'Verduras a la parrilla con salsa chipotle picante y queso',
            kn: '‡≤Æ‡≤∏‡≤æ‡≤≤‡≥Ü ‡≤ö‡≤ø‡≤™‡≥ä‡≤ü‡≥ç‡≤≤‡≥Ü ‡≤∏‡≤æ‡≤∏‡≥ç ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤ö‡≥Ä‡≤∏‡≥ç‚Äå‡≤®‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü ‡≤ó‡≥ç‡≤∞‡≤ø‡≤≤‡≥ç‡≤°‡≥ç ‡≤§‡≤∞‡≤ï‡≤æ‡≤∞‡≤ø‡≤ó‡≤≥‡≥Å'
        },
        image: 'https://images.unsplash.com/photo-1528735602780-2552fd46c7af?ixlib=rb-1.2.1&auto=format&fit=crop&w=100&q=80',
        category: 'veg',
        spicy: 2
    },
    wings: {
        id: 'wings',
        name: { en: 'Spicy Buffalo Wings', hi: '‡§Æ‡§∏‡§æ‡§≤‡•á‡§¶‡§æ‡§∞ ‡§¨‡§´‡§º‡•á‡§≤‡•ã ‡§µ‡§ø‡§Ç‡§ó‡•ç‡§∏', es: 'Alitas de Buffalo Picantes', kn: '‡≤∏‡≥ç‡≤™‡≥à‡≤∏‡≤ø ‡≤¨‡≤´‡≤≤‡≥ã ‡≤µ‡≤ø‡≤Ç‡≤ó‡≥ç‡≤∏‡≥ç' },
        price: 349,
        description: {
            en: 'Crispy chicken wings tossed in spicy buffalo sauce',
            hi: '‡§Æ‡§∏‡§æ‡§≤‡•á‡§¶‡§æ‡§∞ ‡§¨‡§´‡§º‡•á‡§≤‡•ã ‡§∏‡•â‡§∏ ‡§Æ‡•á‡§Ç ‡§ü‡•â‡§∏ ‡§ï‡•Ä ‡§ó‡§à ‡§ï‡•Å‡§∞‡§ï‡•Å‡§∞‡•á ‡§ö‡§ø‡§ï‡§® ‡§µ‡§ø‡§Ç‡§ó‡•ç‡§∏',
            es: 'Crujientes alitas de pollo mezcladas en salsa buffalo picante',
            kn: '‡≤Æ‡≤∏‡≤æ‡≤≤‡≥Ü ‡≤¨‡≤´‡≤≤‡≥ã ‡≤∏‡≤æ‡≤∏‡≥ç‚Äå‡≤®‡≤≤‡≥ç‡≤≤‡≤ø ‡≤ü‡≤æ‡≤∏‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø‡≤¶ ‡≤ï‡≥ç‡≤∞‡≤ø‡≤∏‡≥ç‡≤™‡≤ø ‡≤ö‡≤ø‡≤ï‡≤®‡≥ç ‡≤µ‡≤ø‡≤Ç‡≤ó‡≥ç‡≤∏‡≥ç'
        },
        image: 'https://images.unsplash.com/photo-1567620832903-9fc6debc209f?ixlib=rb-1.2.1&auto=format&fit=crop&w=100&q=80',
        category: 'non-veg',
        spicy: 5
    }
};

// Translations
const translations = {
    en: {
        welcome: "Welcome to Spicy Delights! üî•Please tell us your name to begin.",
        namePrompt: "What's your name?",
        menuTitle: "Our Spicy Menu üå∂",
        orderPrompt: "What would you like to order today?",
        modifyPrompt: "You can modify your order by saying: 'Change 2 pizzas to 3' or 'Remove 1 pasta'",
        specialRequestPrompt: "Any special requests? (e.g. 'Extra spicy', 'Less spicy', 'No onions')",
        schedulePrompt: "When would you like your order? (e.g. '7 PM' or 'Tomorrow at 8 AM')",
        confirmOrder: "Please confirm your order:",
        paymentPrompt: "How would you like to pay?",
        thankYou: "Thank you for your order! Your spicy food will be prepared soon. üî•",
        hello: "Hello",
        total: "Total",
        yourOrder: "Your Current Order",
        emptyOrder: "Your order is empty. Please add some spicy items first!",
        orderUpdated: "Updated {item} to quantity {qty}",
        orderRemoved: "Removed {qty} {item} from your order",
        modifyError: "I didn't understand that modification. Please try something like: 'Change 2 pizzas to 3' or 'Remove 1 pasta'",
        requestAdded: "Added special request: '{request}'",
        requestError: "I couldn't add that request. Please check the item name and try again.",
        orderScheduled: "Your order is scheduled for {time}",
        scheduleError: "I didn't understand the time. Please try formats like '7 PM' or 'Tomorrow 8 AM'",
        error: "I'm having trouble processing that. Please try again.",
        listening: "Listening... Please speak now",
        typing: "Thinking...",
        vegetarian: "Vegetarian",
        nonVegetarian: "Non-Vegetarian",
        glutenFree: "Gluten Free",
        addToOrder: "Add to Order",
        addedToOrder: "Added {count} spicy item(s) to your order üî•",
        notUnderstood: "I didn't understand that. Try something like: '2 pizzas', 'Show menu', or 'My order'",
        whatNext: "What would you like to do next?",
        addMore: "Add more items",
        modifyOrder: "Modify my order",
        confirmOrderBtn: "Confirm order",
        typeHere: "Type your message...",
        paymentOptions: "Payment Options",
        creditCard: "Credit Card",
        cash: "Cash",
        roomCharge: "Room Charge",
        paymentConfirmed: "Payment confirmed with {method}",
        connectionError: "I'm having connection issues but can still take your order offline",
        clearChatConfirm: "Are you sure you want to clear the chat?",
        chatCleared: "Chat cleared. How can I help you today?",
        send: "Send",
        spicyLevel: "Spice Level:"
    },
    hi: {
        welcome: "‡§∏‡•ç‡§™‡§æ‡§á‡§∏‡•Ä ‡§°‡§ø‡§≤‡§æ‡§á‡§ü‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à! üî• ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡§®‡§æ ‡§®‡§æ‡§Æ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§",
        namePrompt: "‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
        menuTitle: "‡§π‡§Æ‡§æ‡§∞‡§æ ‡§Æ‡§∏‡§æ‡§≤‡•á‡§¶‡§æ‡§∞ ‡§Æ‡•á‡§®‡•Ç üå∂",
        orderPrompt: "‡§Ü‡§ú ‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?",
        modifyPrompt: "‡§Ü‡§™ '2 ‡§™‡§ø‡§ú‡•ç‡§ú‡§æ ‡§ï‡•ã 3 ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡•á‡§Ç' ‡§Ø‡§æ '1 ‡§™‡§æ‡§∏‡•ç‡§§‡§æ ‡§π‡§ü‡§æ‡§è‡§Ç' ‡§ï‡§π‡§ï‡§∞ ‡§Ö‡§™‡§®‡§æ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§¨‡§¶‡§≤ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç",
        specialRequestPrompt: "‡§ï‡•ã‡§à ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß? (‡§ú‡•à‡§∏‡•á '‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§Æ‡§∏‡§æ‡§≤‡•á‡§¶‡§æ‡§∞', '‡§ï‡§Æ ‡§Æ‡§∏‡§æ‡§≤‡•á‡§¶‡§æ‡§∞', '‡§™‡•ç‡§Ø‡§æ‡§ú ‡§®‡§π‡•Ä‡§Ç')",
        schedulePrompt: "‡§Ü‡§™ ‡§Ö‡§™‡§®‡§æ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡§¨ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á? (‡§ú‡•à‡§∏‡•á '‡§∂‡§æ‡§Æ 7 ‡§¨‡§ú‡•á' ‡§Ø‡§æ '‡§ï‡§≤ ‡§∏‡•Å‡§¨‡§π 8 ‡§¨‡§ú‡•á')",
        confirmOrder: "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç:",
        paymentPrompt: "‡§Ü‡§™ ‡§ï‡•à‡§∏‡•á ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?",
        thankYou: "‡§Ü‡§™‡§ï‡•á ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§Ü‡§™‡§ï‡§æ ‡§Æ‡§∏‡§æ‡§≤‡•á‡§¶‡§æ‡§∞ ‡§ñ‡§æ‡§®‡§æ ‡§ú‡§≤‡•ç‡§¶ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ‡•§ üî•",
        hello: "‡§®‡§Æ‡§∏‡•ç‡§§‡•á",
        total: "‡§ï‡•Å‡§≤",
        yourOrder: "‡§Ü‡§™‡§ï‡§æ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§ë‡§∞‡•ç‡§°‡§∞",
        emptyOrder: "‡§Ü‡§™‡§ï‡§æ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ñ‡§æ‡§≤‡•Ä ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡§π‡§≤‡•á ‡§ï‡•Å‡§õ ‡§Æ‡§∏‡§æ‡§≤‡•á‡§¶‡§æ‡§∞ ‡§Ü‡§á‡§ü‡§Æ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç!",
        orderUpdated: "{item} ‡§ï‡•ã {qty} ‡§ï‡•Ä ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ ‡§Æ‡•á‡§Ç ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ",
        orderRemoved: "‡§Ü‡§™‡§ï‡•á ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§∏‡•á {qty} {item} ‡§π‡§ü‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ",
        modifyError: "‡§Æ‡•à‡§Ç ‡§â‡§∏ ‡§∏‡§Ç‡§∂‡•ã‡§ß‡§® ‡§ï‡•ã ‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§™‡§æ‡§Ø‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ '2 ‡§™‡§ø‡§ú‡•ç‡§ú‡§æ ‡§ï‡•ã 3 ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡•á‡§Ç' ‡§Ø‡§æ '1 ‡§™‡§æ‡§∏‡•ç‡§§‡§æ ‡§π‡§ü‡§æ‡§è‡§Ç' ‡§ú‡•à‡§∏‡§æ ‡§ï‡•Å‡§õ ‡§ï‡§π‡§ï‡§∞ ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç",
        requestAdded: "‡§µ‡§ø‡§∂‡•á‡§∑ ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§ú‡•ã‡§°‡§º‡§æ: '{request}'",
        requestError: "‡§Æ‡•à‡§Ç ‡§µ‡§π ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§ú‡•ã‡§°‡§º ‡§®‡§π‡•Ä‡§Ç ‡§™‡§æ‡§Ø‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ü‡§á‡§ü‡§Æ ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç ‡§î‡§∞ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç",
        orderScheduled: "‡§Ü‡§™‡§ï‡§æ ‡§ë‡§∞‡•ç‡§°‡§∞ {time} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§ø‡§§ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à",
        scheduleError: "‡§Æ‡•à‡§Ç ‡§∏‡§Æ‡§Ø ‡§®‡§π‡•Ä‡§Ç ‡§∏‡§Æ‡§ù ‡§™‡§æ‡§Ø‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ '‡§∂‡§æ‡§Æ 7 ‡§¨‡§ú‡•á' ‡§Ø‡§æ '‡§ï‡§≤ ‡§∏‡•Å‡§¨‡§π 8 ‡§¨‡§ú‡•á' ‡§ú‡•à‡§∏‡•á ‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™ ‡§Ü‡§ú‡§Æ‡§æ‡§è‡§Ç",
        error: "‡§Æ‡•Å‡§ù‡•á ‡§á‡§∏‡•á ‡§∏‡§Ç‡§∏‡§æ‡§ß‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§™‡§∞‡•á‡§∂‡§æ‡§®‡•Ä ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§",
        listening: "‡§∏‡•Å‡§® ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å... ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§¨ ‡§¨‡•ã‡§≤‡•á‡§Ç",
        typing: "‡§∏‡•ã‡§ö ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å...",
        vegetarian: "‡§∂‡§æ‡§ï‡§æ‡§π‡§æ‡§∞‡•Ä",
        nonVegetarian: "‡§Æ‡§æ‡§Ç‡§∏‡§æ‡§π‡§æ‡§∞‡•Ä",
        glutenFree: "‡§ó‡•ç‡§≤‡•Ç‡§ü‡•á‡§® ‡§Æ‡•Å‡§ï‡•ç‡§§",
        addToOrder: "‡§ë‡§∞‡•ç‡§°‡§∞ ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º‡•á‡§Ç",
        addedToOrder: "‡§Ü‡§™‡§ï‡•á ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§Æ‡•á‡§Ç {count} ‡§Æ‡§∏‡§æ‡§≤‡•á‡§¶‡§æ‡§∞ ‡§Ü‡§á‡§ü‡§Æ ‡§ú‡•ã‡§°‡§º‡•á ‡§ó‡§è üî•",
        notUnderstood: "‡§Æ‡•à‡§Ç ‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§™‡§æ‡§Ø‡§æ‡•§ '2 ‡§™‡§ø‡§ú‡•ç‡§ú‡§æ', '‡§Æ‡•á‡§®‡•Ç ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç', ‡§Ø‡§æ '‡§Æ‡•á‡§∞‡§æ ‡§ë‡§∞‡•ç‡§°‡§∞' ‡§ú‡•à‡§∏‡§æ ‡§ï‡•Å‡§õ ‡§ï‡§π‡§ï‡§∞ ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç",
        whatNext: "‡§Ö‡§¨ ‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?",
        addMore: "‡§î‡§∞ ‡§Ü‡§á‡§ü‡§Æ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç",
        modifyOrder: "‡§Æ‡•á‡§∞‡§æ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§¨‡§¶‡§≤‡•á‡§Ç",
        confirmOrderBtn: "‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡•Ä ‡§™‡•Å‡§∑‡•ç‡§ü‡§ø ‡§ï‡§∞‡•á‡§Ç",
        typeHere: "‡§Ö‡§™‡§®‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç...",
        paymentOptions: "‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™",
        creditCard: "‡§ï‡•ç‡§∞‡•á‡§°‡§ø‡§ü ‡§ï‡§æ‡§∞‡•ç‡§°",
        cash: "‡§®‡§ï‡§¶",
        roomCharge: "‡§ï‡§Æ‡§∞‡§æ ‡§∂‡•Å‡§≤‡•ç‡§ï",
        paymentConfirmed: "{method} ‡§∏‡•á ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§ï‡•Ä ‡§™‡•Å‡§∑‡•ç‡§ü‡§ø ‡§π‡•Å‡§à",
        connectionError: "‡§Æ‡•Å‡§ù‡•á ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§è‡§Å ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡§Ç, ‡§≤‡•á‡§ï‡§ø‡§® ‡§Æ‡•à‡§Ç ‡§Ö‡§≠‡•Ä ‡§≠‡•Ä ‡§Ü‡§™‡§ï‡§æ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ë‡§´‡§º‡§≤‡§æ‡§á‡§® ‡§≤‡•á ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å",
        clearChatConfirm: "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§µ‡§æ‡§ï‡§à ‡§ö‡•à‡§ü ‡§∏‡§æ‡§´‡§º ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?",
        chatCleared: "‡§ö‡•à‡§ü ‡§∏‡§æ‡§´‡§º ‡§π‡•ã ‡§ó‡§à‡•§ ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å?",
        send: "‡§≠‡•á‡§ú‡•á‡§Ç",
        spicyLevel: "‡§Æ‡§∏‡§æ‡§≤‡•á ‡§ï‡§æ ‡§∏‡•ç‡§§‡§∞:"
    },
    es: {
        welcome: "¬°Bienvenido a Spicy Delights! üî• Por favor, dinos tu nombre para comenzar.",
        namePrompt: "¬øCu√°l es tu nombre?",
        menuTitle: "Nuestro Men√∫ Picante üå∂",
        orderPrompt: "¬øQu√© te gustar√≠a ordenar hoy?",
        modifyPrompt: "Puedes modificar tu pedido diciendo: 'Cambiar 2 pizzas a 3' o 'Quitar 1 pasta'",
        specialRequestPrompt: "¬øAlg√∫n pedido especial? (ej. 'Extra picante', 'Menos picante', 'Sin cebolla')",
        schedulePrompt: "¬øCu√°ndo deseas tu pedido? (ej. '7 PM' o 'Ma√±ana a las 8 AM')",
        confirmOrder: "Por favor confirma tu pedido:",
        paymentPrompt: "¬øC√≥mo te gustar√≠a pagar?",
        thankYou: "¬°Gracias por tu pedido! Tu comida picante ser√° preparada pronto. üî•",
        hello: "Hola",
        total: "Total",
        yourOrder: "Tu Pedido Actual",
        emptyOrder: "Tu pedido est√° vac√≠o. ¬°Por favor agrega algunos art√≠culos picantes primero!",
        orderUpdated: "Actualizado {item} a cantidad {qty}",
        orderRemoved: "Eliminado {qty} {item} de tu pedido",
        modifyError: "No entend√≠ esa modificaci√≥n. Por favor intenta algo como: 'Cambiar 2 pizzas a 3' o 'Quitar 1 pasta'",
        requestAdded: "Solicitud especial agregada: '{request}'",
        requestError: "No pude agregar esa solicitud. Por favor verifica el nombre del art√≠culo e intenta nuevamente.",
        orderScheduled: "Tu pedido est√° programado para {time}",
        scheduleError: "No entend√≠ la hora. Por favor usa formatos como '7 PM' o 'Ma√±ana 8 AM'",
        error: "Estoy teniendo problemas para procesar eso. Por favor intenta nuevamente.",
        listening: "Escuchando... Por favor habla ahora",
        typing: "Pensando...",
        vegetarian: "Vegetariano",
        nonVegetarian: "No Vegetariano",
        glutenFree: "Sin Gluten",
        addToOrder: "A√±adir al Pedido",
        addedToOrder: "Se agregaron {count} art√≠culo(s) picante(s) a tu pedido üî•",
        notUnderstood: "No entend√≠ eso. Intenta algo como: '2 pizzas', 'Mostrar men√∫', o 'Mi pedido'",
        whatNext: "¬øQu√© te gustar√≠a hacer ahora?",
        addMore: "A√±adir m√°s art√≠culos",
        modifyOrder: "Modificar mi pedido",
        confirmOrderBtn: "Confirmar pedido",
        typeHere: "Escribe tu mensaje...",
        paymentOptions: "Opciones de Pago",
        creditCard: "Tarjeta de Cr√©dito",
        cash: "Efectivo",
        roomCharge: "Cargo a Habitaci√≥n",
        paymentConfirmed: "Pago confirmado con {method}",
        connectionError: "Estoy teniendo problemas de conexi√≥n pero a√∫n puedo tomar tu pedido sin conexi√≥n",
        clearChatConfirm: "¬øEst√°s seguro de que quieres borrar el chat?",
        chatCleared: "Chat borrado. ¬øC√≥mo puedo ayudarte hoy?",
        send: "Enviar",
        spicyLevel: "Nivel de picante:"
    },
    kn: {
        welcome: "‡≤∏‡≥ç‡≤™‡≥à‡≤∏‡≤ø ‡≤°‡≤ø‡≤≤‡≥à‡≤ü‡≥ç‡≤∏‡≥ç‚Äå‡≤ó‡≥Ü ‡≤∏‡≥Å‡≤∏‡≥ç‡≤µ‡≤æ‡≤ó‡≤§! üî• ‡≤™‡≥ç‡≤∞‡≤æ‡≤∞‡≤Ç‡≤≠‡≤ø‡≤∏‡≤≤‡≥Å ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤π‡≥Ü‡≤∏‡≤∞‡≤®‡≥ç‡≤®‡≥Å ‡≤π‡≥á‡≤≥‡≤ø.",
        namePrompt: "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤π‡≥Ü‡≤∏‡≤∞‡≥á‡≤®‡≥Å?",
        menuTitle: "‡≤®‡≤Æ‡≥ç‡≤Æ ‡≤Æ‡≤∏‡≤æ‡≤≤‡≥Ü ‡≤Æ‡≥Ü‡≤®‡≥Å üå∂",
        orderPrompt: "‡≤®‡≥Ä‡≤µ‡≥Å ‡≤á‡≤Ç‡≤¶‡≥Å ‡≤è‡≤®‡≥Å ‡≤Ü‡≤∞‡≥ç‡≤°‡≤∞‡≥ç ‡≤Æ‡≤æ‡≤°‡≤≤‡≥Å ‡≤¨‡≤Ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≥Ä‡≤∞‡≤ø?",
        modifyPrompt: "'2 ‡≤™‡≤ø‡≤ú‡≥ç‡≤ú‡≤æ‡≤µ‡≤®‡≥ç‡≤®‡≥Å 3‡≤ï‡≥ç‡≤ï‡≥Ü ‡≤¨‡≤¶‡≤≤‡≤æ‡≤Ø‡≤ø‡≤∏‡≤ø' ‡≤Ö‡≤•‡≤µ‡≤æ '1 ‡≤™‡≤æ‡≤∏‡≥ç‡≤§‡≤æ ‡≤§‡≥Ü‡≤ó‡≥Ü‡≤¶‡≥Å‡≤π‡≤æ‡≤ï‡≤ø' ‡≤é‡≤Ç‡≤¶‡≥Å ‡≤π‡≥á‡≤≥‡≥Å‡≤µ ‡≤Æ‡≥Ç‡≤≤‡≤ï ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Ü‡≤∞‡≥ç‡≤°‡≤∞‡≥ç ‡≤Ö‡≤®‡≥ç‡≤®‡≥Å ‡≤Æ‡≤æ‡≤∞‡≥ç‡≤™‡≤°‡≤ø‡≤∏‡≤¨‡≤π‡≥Å‡≤¶‡≥Å",
        specialRequestPrompt: "‡≤Ø‡≤æ‡≤µ‡≥Å‡≤¶‡≤æ‡≤¶‡≤∞‡≥Ç ‡≤µ‡≤ø‡≤∂‡≥á‡≤ñ ‡≤µ‡≤ø‡≤®‡≤Ç‡≤§‡≤ø‡≤ó‡≤≥‡≥Å? (‡≤â‡≤¶‡≤æ. '‡≤π‡≥Ü‡≤ö‡≥ç‡≤ö‡≥Å ‡≤Æ‡≤∏‡≤æ‡≤≤‡≥Ü', '‡≤ï‡≤°‡≤ø‡≤Æ‡≥Ü ‡≤Æ‡≤∏‡≤æ‡≤≤‡≥Ü', '‡≤à‡≤∞‡≥Å‡≤≥‡≥ç‡≤≥‡≤ø ‡≤á‡≤≤‡≥ç‡≤≤')",
        schedulePrompt: "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Ü‡≤∞‡≥ç‡≤°‡≤∞‡≥ç ‡≤Ø‡≤æ‡≤µ‡≤æ‡≤ó ‡≤¨‡≥á‡≤ï‡≥Å? (‡≤â‡≤¶‡≤æ. '‡≤∏‡≤Ç‡≤ú‡≥Ü 7' ‡≤Ö‡≤•‡≤µ‡≤æ '‡≤®‡≤æ‡≤≥‡≥Ü ‡≤¨‡≥Ü‡≤≥‡≤ó‡≥ç‡≤ó‡≥Ü 8')",
        confirmOrder: "‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Ü‡≤∞‡≥ç‡≤°‡≤∞‡≥ç ‡≤ñ‡≤ö‡≤ø‡≤§‡≤™‡≤°‡≤ø‡≤∏‡≤ø:",
        paymentPrompt: "‡≤®‡≥Ä‡≤µ‡≥Å ‡≤π‡≥á‡≤ó‡≥Ü ‡≤™‡≤æ‡≤µ‡≤§‡≤ø‡≤∏‡≤≤‡≥Å ‡≤¨‡≤Ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≥Ä‡≤∞‡≤ø?",
        thankYou: "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Ü‡≤∞‡≥ç‡≤°‡≤∞‡≥ç‡≤ó‡≥Ü ‡≤ß‡≤®‡≥ç‡≤Ø‡≤µ‡≤æ‡≤¶‡≤ó‡≤≥‡≥Å! ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Æ‡≤∏‡≤æ‡≤≤‡≥Ü ‡≤Ü‡≤π‡≤æ‡≤∞‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤∂‡≥Ä‡≤ò‡≥ç‡≤∞‡≤¶‡≤≤‡≥ç‡≤≤‡≥á ‡≤§‡≤Ø‡≤æ‡≤∞‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≥Å‡≤§‡≥ç‡≤§‡≤¶‡≥Ü. üî•",
        hello: "‡≤®‡≤Æ‡≤∏‡≥ç‡≤ï‡≤æ‡≤∞",
        total: "‡≤í‡≤ü‡≥ç‡≤ü‡≥Å",
        yourOrder: "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤™‡≥ç‡≤∞‡≤∏‡≥ç‡≤§‡≥Å‡≤§ ‡≤Ü‡≤∞‡≥ç‡≤°‡≤∞‡≥ç",
        emptyOrder: "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Ü‡≤∞‡≥ç‡≤°‡≤∞‡≥ç ‡≤ñ‡≤æ‡≤≤‡≤ø‡≤Ø‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤Æ‡≥ä‡≤¶‡≤≤‡≥Å ‡≤ï‡≥Ü‡≤≤‡≤µ‡≥Å ‡≤Æ‡≤∏‡≤æ‡≤≤‡≥Ü ‡≤µ‡≤∏‡≥ç‡≤§‡≥Å‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤ø!",
        orderUpdated: "{item} ‡≤Ö‡≤®‡≥ç‡≤®‡≥Å {qty} ‡≤™‡≥ç‡≤∞‡≤Æ‡≤æ‡≤£‡≤ï‡≥ç‡≤ï‡≥Ü ‡≤®‡≤µ‡≥Ä‡≤ï‡≤∞‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü",
        orderRemoved: "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Ü‡≤∞‡≥ç‡≤°‡≤∞‡≥ç‡≤®‡≤ø‡≤Ç‡≤¶ {qty} {item} ‡≤Ö‡≤®‡≥ç‡≤®‡≥Å ‡≤§‡≥Ü‡≤ó‡≥Ü‡≤¶‡≥Å‡≤π‡≤æ‡≤ï‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü",
        modifyError: "‡≤®‡≤æ‡≤®‡≥Å ‡≤Ü ‡≤Æ‡≤æ‡≤∞‡≥ç‡≤™‡≤æ‡≤°‡≤®‡≥ç‡≤®‡≥Å ‡≤Ö‡≤∞‡≥ç‡≤•‡≤Æ‡≤æ‡≤°‡≤ø‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≤≤‡≤ø‡≤≤‡≥ç‡≤≤. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å '2 ‡≤™‡≤ø‡≤ú‡≥ç‡≤ú‡≤æ‡≤µ‡≤®‡≥ç‡≤®‡≥Å 3‡≤ï‡≥ç‡≤ï‡≥Ü ‡≤¨‡≤¶‡≤≤‡≤æ‡≤Ø‡≤ø‡≤∏‡≤ø' ‡≤Ö‡≤•‡≤µ‡≤æ '1 ‡≤™‡≤æ‡≤∏‡≥ç‡≤§‡≤æ ‡≤§‡≥Ü‡≤ó‡≥Ü‡≤¶‡≥Å‡≤π‡≤æ‡≤ï‡≤ø' ‡≤é‡≤Ç‡≤¶‡≥Å ‡≤™‡≥ç‡≤∞‡≤Ø‡≤§‡≥ç‡≤®‡≤ø‡≤∏‡≤ø",
        requestAdded: "‡≤µ‡≤ø‡≤∂‡≥á‡≤ñ ‡≤µ‡≤ø‡≤®‡≤Ç‡≤§‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü: '{request}'",
        requestError: "‡≤®‡≤æ‡≤®‡≥Å ‡≤Ü ‡≤µ‡≤ø‡≤®‡≤Ç‡≤§‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤≤‡≥Å ‡≤∏‡≤æ‡≤ß‡≥ç‡≤Ø‡≤µ‡≤æ‡≤ó‡≤≤‡≤ø‡≤≤‡≥ç‡≤≤. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤ê‡≤ü‡≤Ç ‡≤π‡≥Ü‡≤∏‡≤∞‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≤∞‡≤ø‡≤∂‡≥Ä‡≤≤‡≤ø‡≤∏‡≤ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Ü ‡≤™‡≥ç‡≤∞‡≤Ø‡≤§‡≥ç‡≤®‡≤ø‡≤∏‡≤ø",
        orderScheduled: "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Ü‡≤∞‡≥ç‡≤°‡≤∞‡≥ç ‡≤Ö‡≤®‡≥ç‡≤®‡≥Å {time} ‡≤ó‡≥Ü ‡≤∂‡≥Ü‡≤°‡≥ç‡≤Ø‡≥Ç‡≤≤‡≥ç ‡≤Æ‡≤æ‡≤°‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü",
        scheduleError: "‡≤®‡≤æ‡≤®‡≥Å ‡≤∏‡≤Æ‡≤Ø‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤Ö‡≤∞‡≥ç‡≤•‡≤Æ‡≤æ‡≤°‡≤ø‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≤≤‡≤ø‡≤≤‡≥ç‡≤≤. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å '‡≤∏‡≤Ç‡≤ú‡≥Ü 7' ‡≤Ö‡≤•‡≤µ‡≤æ '‡≤®‡≤æ‡≤≥‡≥Ü ‡≤¨‡≥Ü‡≤≥‡≤ó‡≥ç‡≤ó‡≥Ü 8' ‡≤∞‡≤Ç‡≤§‡≤π ‡≤∏‡≥ç‡≤µ‡≤∞‡≥Ç‡≤™‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≥ç‡≤∞‡≤Ø‡≤§‡≥ç‡≤®‡≤ø‡≤∏‡≤ø",
        error: "‡≤®‡≤æ‡≤®‡≥Å ‡≤Ö‡≤¶‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≥ç‡≤∞‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≥Ü‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≤≤‡≥Å ‡≤§‡≥ä‡≤Ç‡≤¶‡≤∞‡≥Ü ‡≤™‡≤°‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥ç‡≤¶‡≥á‡≤®‡≥Ü. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Ü ‡≤™‡≥ç‡≤∞‡≤Ø‡≤§‡≥ç‡≤®‡≤ø‡≤∏‡≤ø.",
        listening: "‡≤ï‡≥á‡≤≥‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥ç‡≤¶‡≥á‡≤®‡≥Ü... ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤à‡≤ó ‡≤Æ‡≤æ‡≤§‡≤®‡≤æ‡≤°‡≤ø",
        typing: "‡≤Ø‡≥ã‡≤ö‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü...",
        vegetarian: "‡≤∂‡≤æ‡≤ï‡≤æ‡≤π‡≤æ‡≤∞‡≤ø",
        nonVegetarian: "‡≤Æ‡≤æ‡≤Ç‡≤∏‡≤æ‡≤π‡≤æ‡≤∞‡≤ø",
        glutenFree: "‡≤ó‡≥ç‡≤≤‡≥Å‡≤ü‡≥Ü‡≤®‡≥ç ‡≤∞‡≤π‡≤ø‡≤§",
        addToOrder: "‡≤Ü‡≤∞‡≥ç‡≤°‡≤∞‡≥ç‡≤ó‡≥Ü ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤ø",
        addedToOrder: "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Ü‡≤∞‡≥ç‡≤°‡≤∞‡≥ç‡≤ó‡≥Ü {count} ‡≤Æ‡≤∏‡≤æ‡≤≤‡≥Ü ‡≤ê‡≤ü‡≤Ç(‡≤ó‡≤≥‡≥Å) ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü üî•",
        notUnderstood: "‡≤®‡≤æ‡≤®‡≥Å ‡≤Ö‡≤∞‡≥ç‡≤•‡≤Æ‡≤æ‡≤°‡≤ø‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≤≤‡≤ø‡≤≤‡≥ç‡≤≤. '2 ‡≤™‡≤ø‡≤ú‡≥ç‡≤ú‡≤æ', '‡≤Æ‡≥Ü‡≤®‡≥Å ‡≤§‡≥ã‡≤∞‡≤ø‡≤∏‡≤ø', ‡≤Ö‡≤•‡≤µ‡≤æ '‡≤®‡≤®‡≥ç‡≤® ‡≤Ü‡≤∞‡≥ç‡≤°‡≤∞‡≥ç' ‡≤é‡≤Ç‡≤¶‡≥Å ‡≤™‡≥ç‡≤∞‡≤Ø‡≤§‡≥ç‡≤®‡≤ø‡≤∏‡≤ø",
        whatNext: "‡≤®‡≥Ä‡≤µ‡≥Å ‡≤Æ‡≥Å‡≤Ç‡≤¶‡≥Ü ‡≤è‡≤®‡≥Å ‡≤Æ‡≤æ‡≤°‡≤≤‡≥Å ‡≤¨‡≤Ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≥Ä‡≤∞‡≤ø?",
        addMore: "‡≤π‡≥Ü‡≤ö‡≥ç‡≤ö‡≥Å ‡≤ê‡≤ü‡≤Ç‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤ø",
        modifyOrder: "‡≤®‡≤®‡≥ç‡≤® ‡≤Ü‡≤∞‡≥ç‡≤°‡≤∞‡≥ç ‡≤Æ‡≤æ‡≤∞‡≥ç‡≤™‡≤°‡≤ø‡≤∏‡≤ø",
        confirmOrderBtn: "‡≤Ü‡≤∞‡≥ç‡≤°‡≤∞‡≥ç ‡≤ñ‡≤ö‡≤ø‡≤§‡≤™‡≤°‡≤ø‡≤∏‡≤ø",
        typeHere: "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤∏‡≤Ç‡≤¶‡≥á‡≤∂‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤ü‡≥à‡≤™‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø...",
        paymentOptions: "‡≤™‡≤æ‡≤µ‡≤§‡≤ø ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤ó‡≤≥‡≥Å",
        creditCard: "‡≤ï‡≥ç‡≤∞‡≥Ü‡≤°‡≤ø‡≤ü‡≥ç ‡≤ï‡≤æ‡≤∞‡≥ç‡≤°‡≥ç",
        cash: "‡≤®‡≤ó‡≤¶‡≥Å",
        roomCharge: "‡≤ï‡≥ã‡≤£‡≥Ü ‡≤∂‡≥Å‡≤≤‡≥ç‡≤ï",
        paymentConfirmed: "{method} ‡≤®‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü ‡≤™‡≤æ‡≤µ‡≤§‡≤ø ‡≤ñ‡≤ö‡≤ø‡≤§‡≤™‡≤°‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü",
        connectionError: "‡≤®‡≤æ‡≤®‡≥Å ‡≤∏‡≤Ç‡≤™‡≤∞‡≥ç‡≤ï ‡≤∏‡≤Æ‡≤∏‡≥ç‡≤Ø‡≥Ü‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤é‡≤¶‡≥Å‡≤∞‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥ç‡≤¶‡≥á‡≤®‡≥Ü ‡≤Ü‡≤¶‡≤∞‡≥Ü ‡≤á‡≤®‡≥ç‡≤®‡≥Ç ‡≤Ü‡≤´‡≥ç‡≤≤‡≥à‡≤®‡≥ç‡≤®‡≤≤‡≥ç‡≤≤‡≤ø ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Ü‡≤∞‡≥ç‡≤°‡≤∞‡≥ç ‡≤§‡≥Ü‡≤ó‡≥Ü‡≤¶‡≥Å‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≤¨‡≤π‡≥Å‡≤¶‡≥Å",
        clearChatConfirm: "‡≤®‡≥Ä‡≤µ‡≥Å ‡≤ö‡≤æ‡≤ü‡≥ç ‡≤Ö‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≥ç‡≤™‡≤∑‡≥ç‡≤ü‡≤µ‡≤æ‡≤ó‡≤ø ‡≤Æ‡≤æ‡≤°‡≤≤‡≥Å ‡≤ñ‡≤ö‡≤ø‡≤§‡≤µ‡≤æ‡≤ó‡≤ø ‡≤¨‡≤Ø‡≤∏‡≥Å‡≤µ‡≤ø‡≤∞‡≤æ?",
        chatCleared: "‡≤ö‡≤æ‡≤ü‡≥ç ‡≤∏‡≥ç‡≤™‡≤∑‡≥ç‡≤ü‡≤µ‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü. ‡≤®‡≤æ‡≤®‡≥Å ‡≤á‡≤Ç‡≤¶‡≥Å ‡≤®‡≤ø‡≤Æ‡≤ó‡≥Ü ‡≤π‡≥á‡≤ó‡≥Ü ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤Æ‡≤æ‡≤°‡≤¨‡≤π‡≥Å‡≤¶‡≥Å?",
        send: "‡≤ï‡≤≥‡≥Å‡≤π‡≤ø‡≤∏‡≥Å",
        spicyLevel: "‡≤Æ‡≤∏‡≤æ‡≤≤‡≥Ü ‡≤Æ‡≤ü‡≥ç‡≤ü:"
    }
};

// DOM elements
const chatMessages = document.getElementById('chat-messages');
const userInput = document.getElementById('user-input');
const sendButton = document.getElementById('send-button');
const voiceBtn = document.getElementById('voice-btn');
const langButtons = document.querySelectorAll('.lang-btn');
const clearChatBtn = document.getElementById('clear-chat');
const spicyAnimation = document.getElementById('spicy-animation');

// Initialize conversation state
let conversationState = {
    step: 'welcome',
    name: '',
    orders: [],
    language: 'en',
    scheduledTime: null,
    recurringOrder: false,
    paymentMethod: null
};

// Initialize voice recognition
let recognition;
if ('webkitSpeechRecognition' in window) {
    recognition = new webkitSpeechRecognition();
    recognition.continuous = false;
    recognition.interimResults = false;
    
    recognition.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        userInput.value = transcript;
        voiceBtn.classList.remove('listening');
        sendMessage();
    };
    
    recognition.onerror = (event) => {
        console.error('Voice error:', event.error);
        voiceBtn.classList.remove('listening');
        addBotMessage(getTranslation('error', conversationState.language), 'error');
    };
} else {
    voiceBtn.style.display = 'none';
}

// Event listeners
sendButton.addEventListener('click', sendMessage);
userInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') sendMessage();
});

voiceBtn.addEventListener('click', () => {
    if (!recognition) return;
    recognition.lang = conversationState.language === 'hi' ? 'hi-IN' : 
                      conversationState.language === 'es' ? 'es-ES' :
                      conversationState.language === 'kn' ? 'kn-IN' : 'en-US';
    recognition.start();
    voiceBtn.classList.add('listening');
    addBotMessage(getTranslation('listening', conversationState.language));
});

langButtons.forEach(btn => {
    btn.addEventListener('click', function() {
        langButtons.forEach(b => b.classList.remove('active'));
        this.classList.add('active');
        conversationState.language = this.dataset.lang;
        updateLanguageUI();
        
        // Restart conversation in new language
        if (conversationState.step === 'welcome') {
            addBotMessage(getTranslation('welcome', conversationState.language));
        }
    });
});

clearChatBtn.addEventListener('click', () => {
    if (confirm(getTranslation('clearChatConfirm', conversationState.language))) {
        chatMessages.innerHTML = '';
        conversationState = {
            step: 'welcome',
            name: '',
            orders: [],
            language: conversationState.language,
            scheduledTime: null,
            recurringOrder: false,
            paymentMethod: null
        };
        addBotMessage(getTranslation('chatCleared', conversationState.language));
        setTimeout(() => {
            addBotMessage(getTranslation('welcome', conversationState.language));
        }, 500);
    }
});

// Create spicy animation elements
function createSpicyAnimation() {
    for (let i = 0; i < 10; i++) {
        setTimeout(() => {
            const chili = document.createElement('div');
            chili.className = 'chili-pepper';
            chili.style.left = `${Math.random() * 100}%`;
            chili.style.animationDuration = `${5 + Math.random() * 5}s`;
            chili.style.opacity = Math.random() * 0.7 + 0.3;
            chili.style.width = `${20 + Math.random() * 20}px`;
            chili.style.height = chili.style.width;
            spicyAnimation.appendChild(chili);
            
            // Remove after animation completes
            setTimeout(() => {
                chili.remove();
            }, 10000);
        }, i * 1000);
    }
}

// Create confetti animation
function createConfetti() {
    for (let i = 0; i < 50; i++) {
        const confetti = document.createElement('div');
        confetti.className = 'confetti';
        confetti.style.left = `${Math.random() * 100}%`;
        confetti.style.backgroundColor = `hsl(${Math.random() * 60 + 0}, 100%, 50%)`;
        confetti.style.animationDuration = `${1 + Math.random() * 2}s`;
        confetti.style.animationDelay = `${Math.random() * 0.5}s`;
        confetti.style.width = `${5 + Math.random() * 10}px`;
        confetti.style.height = confetti.style.width;
        spicyAnimation.appendChild(confetti);
        
        // Start animation
        setTimeout(() => {
            confetti.style.animationName = 'confetti-fall';
        }, 10);
        
        // Remove after animation completes
        setTimeout(() => {
            confetti.remove();
        }, 3000);
    }
}

// Initialize chat
setTimeout(() => {
    addBotMessage(getTranslation('welcome', conversationState.language));
    createSpicyAnimation();
    setInterval(createSpicyAnimation, 10000);
}, 500);

// Main message processing
async function sendMessage() {
    const message = userInput.value.trim();
    if (!message) return;
    
    addUserMessage(message);
    userInput.value = '';
    sendButton.disabled = true;
    showTypingIndicator();
    
    try {
        // First try local processing
        const localResponse = processMessageLocally(message);
        if (localResponse && localResponse.length > 0) {
            localResponse.forEach(msg => addBotMessage(msg));
            return;
        }
        
        // Only call Azure if needed and URL is valid
        if (AZURE_FUNCTION_URL && AZURE_FUNCTION_URL.startsWith('https://')) {
            const response = await fetch(AZURE_FUNCTION_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    message: message,
                    conversationState: conversationState
                })
            });
            
            if (response.ok) {
                const data = await response.json();
                if (data.replies) {
                    data.replies.forEach(reply => addBotMessage(reply));
                }
            }
        }
    } catch (error) {
        console.error('Error:', error);
        addBotMessage(getTranslation('error', conversationState.language));
    } finally {
        removeTypingIndicator();
        sendButton.disabled = false;
    }
}

function processMessageLocally(message) {
    const text = message.toLowerCase().trim();
    const lang = conversationState.language;

    // Handle clear/reset
    if (text === 'clear' || text === 'reset') {
        chatMessages.innerHTML = '';
        conversationState = {
            step: 'welcome',
            name: '',
            orders: [],
            language: conversationState.language,
            scheduledTime: null,
            recurringOrder: false,
            paymentMethod: null
        };
        return [getTranslation('chatCleared', lang)];
    }

    // Handle help command
    if (text === 'help') {
        return [
            getTranslation('whatNext', lang),
            `- ${getTranslation('addMore', lang)}`,
            `- ${getTranslation('modifyOrder', lang)}`,
            `- ${getTranslation('confirmOrderBtn', lang)}`,
            `- "clear" ${getTranslation('chatCleared', lang)}`
        ];
    }

    switch (conversationState.step) {
        case 'welcome':
            conversationState.step = 'get_name';
            return [getTranslation('namePrompt', lang)];
            
        case 'get_name':
            if (!text) return [getTranslation('namePrompt', lang)];
            conversationState.name = message;
            conversationState.step = 'show_menu';
            return [
                `${getTranslation('hello', lang)} ${message}!`,
                getTranslation('menuTitle', lang),
                ...showVisualMenu()
            ];
            
        case 'show_menu':
            if (text.includes('menu')) return showVisualMenu();
            if (Object.keys(menuItems).some(item => text.includes(item))) {
                conversationState.step = 'take_order';
                return processOrder(text);
            }
            // Handle action buttons
            if (text === getTranslation('addMore', lang).toLowerCase()) {
                return showVisualMenu();
            }
            if (text === getTranslation('modifyOrder', lang).toLowerCase()) {
                return [getTranslation('modifyPrompt', lang), ...showCurrentOrder()];
            }
            if (text === getTranslation('confirmOrderBtn', lang).toLowerCase()) {
                if (conversationState.orders.length === 0) {
                    return [getTranslation('emptyOrder', lang), ...showVisualMenu()];
                }
                conversationState.step = 'payment';
                createConfetti();
                return showPaymentOptions();
            }
            return [getTranslation('orderPrompt', lang), ...showVisualMenu()];
            
        case 'take_order':
            // Check for modification commands first
            if (text.startsWith('remove') || text.startsWith('delete') || text.startsWith('cancel')) {
                return [modifyOrder(text)];
            }
            if (text.startsWith('change')) {
                return [modifyOrder(text)];
            }
            
            // Handle action buttons
            if (text === getTranslation('addMore', lang).toLowerCase()) {
                return showVisualMenu();
            }
            if (text === getTranslation('modifyOrder', lang).toLowerCase()) {
                return [getTranslation('modifyPrompt', lang), ...showCurrentOrder()];
            }
            if (text === getTranslation('confirmOrderBtn', lang).toLowerCase()) {
                if (conversationState.orders.length === 0) {
                    return [getTranslation('emptyOrder', lang), ...showVisualMenu()];
                }
                conversationState.step = 'payment';
                createConfetti();
                return showPaymentOptions();
            }
            return processOrder(text);
            
        case 'payment':
            if (text.includes('1') || text.includes('credit')) {
                conversationState.paymentMethod = 'creditCard';
            } else if (text.includes('2') || text.includes('cash')) {
                conversationState.paymentMethod = 'cash';
            } else if (text.includes('3') || text.includes('room')) {
                conversationState.paymentMethod = 'roomCharge';
            }
            
            if (conversationState.paymentMethod) {
                conversationState.step = 'complete';
                createConfetti();
                return [
                    `<div class="success-animation">
                        <svg class="checkmark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52">
                            <circle class="checkmark-circle" cx="26" cy="26" r="25" fill="none"/>
                            <path class="checkmark-check" fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8"/>
                        </svg>
                    </div>`,
                    getTranslation('paymentConfirmed', lang)
                        .replace('{method}', getTranslation(conversationState.paymentMethod, lang)),
                    getTranslation('thankYou', lang)
                ];
            }
            return showPaymentOptions();
            
        default:
            return [getTranslation('notUnderstood', lang)];
    }
}

function processOrder(text) {
    const lang = conversationState.language;
    const orderPattern = /(\d+)?\s*([a-zA-Z]+)/g;
    let match;
    let orderedItems = [];
    
    while ((match = orderPattern.exec(text)) !== null) {
        const quantity = match[1] ? parseInt(match[1]) : 1;
        const itemKey = match[2].toLowerCase();
        
        if (menuItems[itemKey]) {
            orderedItems.push({
                ...menuItems[itemKey],
                quantity: quantity,
                specialRequest: ''
            });
        }
    }
    
    if (orderedItems.length > 0) {
        conversationState.orders.push(...orderedItems);
        return [
            getTranslation('addedToOrder', lang).replace('{count}', orderedItems.length),
            ...showCurrentOrder(),
            getTranslation('modifyPrompt', lang),
            getTranslation('specialRequestPrompt', lang),
            getTranslation('schedulePrompt', lang)
        ];
    }
    
    return [getTranslation('notUnderstood', lang)];
}

// Improved order modification function


// UI Functions
function showVisualMenu() {
    const lang = conversationState.language;
    const menuMessages = [];
    
    // Clear any existing menu cards
    document.querySelectorAll('.menu-card').forEach(card => card.remove());
    
    Object.values(menuItems).forEach(item => {
        const menuCard = document.createElement('div');
        menuCard.className = 'menu-card';
        menuCard.innerHTML = `
            <img src="${item.image}" alt="${item.name[lang]}">
            <div class="menu-details">
                <div class="menu-title">
                    <span>${item.name[lang]}</span>
                    <span class="menu-price">‚Çπ${item.price.toFixed(2)}</span>
                </div>
                <div class="menu-tags">
                    <span class="tag ${item.category}">
                        ${item.category === 'veg' ? getTranslation('vegetarian', lang) : 
                          item.category === 'non-veg' ? getTranslation('nonVegetarian', lang) : 
                          getTranslation('glutenFree', lang)}
                    </span>
                </div>
                <div class="spicy-level">
                    ${getSpicyLevelIcons(item.spicy)} ${getTranslation('spicyLevel', lang)}: ${item.spicy}/5
                </div>
                <p>${item.description[lang]}</p>
                <button class="add-to-order" data-item="${item.id}">
                    ${getTranslation('addToOrder', lang)}
                </button>
            </div>
        `;
        chatMessages.appendChild(menuCard);
        
        menuCard.querySelector('.add-to-order').addEventListener('click', function() {
            addToOrder(this.dataset.item);
        });
    });
    
    menuMessages.push(getTranslation('orderPrompt', lang));
    return menuMessages;
}

function getSpicyLevelIcons(level) {
    let icons = '';
    for (let i = 0; i < level; i++) {
        icons += 'üå∂';
    }
    return icons;
}

function showCurrentOrder() {
    const lang = conversationState.language;
    const orderMessages = [];
    
    if (conversationState.orders.length === 0) {
        return [getTranslation('emptyOrder', lang)];
    }
    
    orderMessages.push(`<strong>${getTranslation('yourOrder', lang)}</strong>`);
    
    let total = 0;
    conversationState.orders.forEach((item, i) => {
        const itemTotal = item.price * item.quantity;
        orderMessages.push(`
            <div class="order-item">
                <span>${item.quantity}x ${item.name[lang]} ${getSpicyLevelIcons(item.spicy)}</span>
                <span>‚Çπ${itemTotal.toFixed(2)}</span>
            </div>
        `);
        if (item.specialRequest) {
            orderMessages.push(`<div style="padding-left:20px;font-size:0.9em;">${item.specialRequest}</div>`);
        }
        total += itemTotal;
    });
    
    orderMessages.push(`
        <div class="order-total">
            <span>${getTranslation('total', lang)}:</span>
            <span>‚Çπ${total.toFixed(2)}</span>
        </div>
    `);
    
    if (conversationState.scheduledTime) {
        orderMessages.push(`<div>üïí ${conversationState.scheduledTime}</div>`);
    }
    
    // Add action buttons
    orderMessages.push(`
        <div class="suggested-actions">
            <div class="suggestion-chip" data-action="addMore">${getTranslation('addMore', lang)}</div>
            <div class="suggestion-chip" data-action="modifyOrder">${getTranslation('modifyOrder', lang)}</div>
            <div class="suggestion-chip" data-action="confirmOrder">${getTranslation('confirmOrderBtn', lang)}</div>
        </div>
    `);
    
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message bot-message';
    messageDiv.innerHTML = orderMessages.join('');
    chatMessages.appendChild(messageDiv);
    
    // Add click handlers to action buttons
    messageDiv.querySelectorAll('.suggestion-chip').forEach(chip => {
        chip.addEventListener('click', () => {
            const action = chip.dataset.action;
            handleActionButton(action);
        });
    });
    
    return [];
}

function handleActionButton(action) {
    const lang = conversationState.language;
    
    switch(action) {
        case 'addMore':
            showVisualMenu();
            break;
            
        case 'modifyOrder':
            addBotMessage(getTranslation('modifyPrompt', lang));
            break;
            
        case 'confirmOrder':
            if (conversationState.orders.length === 0) {
                addBotMessage(getTranslation('emptyOrder', lang));
                showVisualMenu();
            } else {
                conversationState.step = 'payment';
                createConfetti();
                showPaymentOptions();
            }
            break;
    }
}

function showPaymentOptions() {
    const lang = conversationState.language;
    const paymentDiv = document.createElement('div');
    paymentDiv.className = 'message bot-message';
    paymentDiv.innerHTML = `
        <strong>${getTranslation('paymentOptions', lang)}</strong>
        <div class="payment-options">
            <div class="payment-option" data-method="1. ${getTranslation('creditCard', lang)}">
                <div class="payment-icon">üí≥</div>
                <div>${getTranslation('creditCard', lang)}</div>
            </div>
            <div class="payment-option" data-method="2. ${getTranslation('cash', lang)}">
                <div class="payment-icon">üíµ</div>
                <div>${getTranslation('cash', lang)}</div>
            </div>
            <div class="payment-option" data-method="3. ${getTranslation('roomCharge', lang)}">
                <div class="payment-icon">üè®</div>
                <div>${getTranslation('roomCharge', lang)}</div>
            </div>
        </div>
    `;
    
    chatMessages.appendChild(paymentDiv);
    
    // Add click handlers to payment options
    paymentDiv.querySelectorAll('.payment-option').forEach(option => {
        option.addEventListener('click', () => {
            userInput.value = option.dataset.method;
            sendMessage();
        });
    });
    
    return [];
}

// Helper functions
function updateLanguageUI() {
    userInput.placeholder = getTranslation('typeHere', conversationState.language);
    sendButton.title = getTranslation('send', conversationState.language);
}

function getTranslation(key, lang) {
    return translations[lang]?.[key] || translations.en[key] || key;
}

function addUserMessage(text) {
    const div = document.createElement('div');
    div.className = 'message user-message';
    div.textContent = text;
    chatMessages.appendChild(div);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function addBotMessage(text, type = 'normal') {
    if (!text) return;
    
    const div = document.createElement('div');
    div.className = `message ${type === 'error' ? 'error-message' : 'bot-message'}`;
    
    if (typeof text === 'string' && text.startsWith('<')) {
        div.innerHTML = text;
    } else {
        div.textContent = text;
    }
    
    chatMessages.appendChild(div);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function showTypingIndicator() {
    const div = document.createElement('div');
    div.className = 'typing-indicator';
    div.id = 'typing-indicator';
    div.innerHTML = `
        <span>${getTranslation('typing', conversationState.language)}</span>
        <span class="typing-dot"></span>
        <span class="typing-dot"></span>
        <span class="typing-dot"></span>
    `;
    chatMessages.appendChild(div);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function removeTypingIndicator() {
    const indicator = document.getElementById('typing-indicator');
    if (indicator) indicator.remove();
}

function addToOrder(itemKey) {
    const item = menuItems[itemKey];
    const lang = conversationState.language;
    
    conversationState.orders.push({
        ...item,
        quantity: 1,
        specialRequest: ''
    });
    
    addBotMessage(getTranslation('addedToOrder', lang).replace('{count}', 1));
    showCurrentOrder();
}

function modifyOrder(command) {
    const lang = conversationState.language;
    const normalize = str => str.toLowerCase().replace(/s$/, '');  // remove plural 's'

    // Remove command
    const removeMatch = command.match(/remove\s+(\d+)?\s*([a-zA-Z]+)/i);
    if (removeMatch) {
        const quantity = removeMatch[1] ? parseInt(removeMatch[1]) : 1;
        const itemNameRaw = normalize(removeMatch[2]);

        const itemIndex = conversationState.orders.findIndex(item =>
            normalize(item.id) === itemNameRaw ||
            normalize(item.name[lang]) === itemNameRaw ||
            normalize(item.name.en) === itemNameRaw
        );

        if (itemIndex !== -1) {
            const currentQty = conversationState.orders[itemIndex].quantity;
            const removedQty = Math.min(currentQty, quantity);
            conversationState.orders[itemIndex].quantity -= removedQty;
            if (conversationState.orders[itemIndex].quantity <= 0) {
                conversationState.orders.splice(itemIndex, 1);
            }
            return getTranslation('orderRemoved', lang)
                .replace('{qty}', removedQty)
                .replace('{item}', itemNameRaw);
        } else {
            return getTranslation('modifyError', lang);
        }
    }

    // Change command
    const changeMatch = command.match(/change\s+(\d+)\s*([a-zA-Z]+)\s+to\s+(\d+)/i);
    if (changeMatch) {
        const oldQty = parseInt(changeMatch[1]);
        const itemNameRaw = normalize(changeMatch[2]);
        const newQty = parseInt(changeMatch[3]);

        const itemIndex = conversationState.orders.findIndex(item =>
            normalize(item.id) === itemNameRaw ||
            normalize(item.name[lang]) === itemNameRaw ||
            normalize(item.name.en) === itemNameRaw
        );

        if (itemIndex !== -1) {
            conversationState.orders[itemIndex].quantity = newQty;
            return getTranslation('orderUpdated', lang)
                .replace('{item}', itemNameRaw)
                .replace('{qty}', newQty);
        } else {
            return getTranslation('modifyError', lang);
        }
    }

    return getTranslation('modifyError', lang);
}

